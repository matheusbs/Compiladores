/* Disciplina: Compiladores 2014.1 */
/* Professor: Franklin Ramalho */
/* Equipe: Matheus Batista e Jefferson Trigueiro */
grammar org.xtext.example.mydsl.MyDsql with org.eclipse.xtext.common.Terminals

generate myDsql "http://www.xtext.org/example/mydsl/MyDsql"

Program:
	ProgramHeading Block PERIOD;

ProgramHeading:
	PROGRAMT name=IDENTIFIER LPAREN IdentifierList RPAREN SEMICOLON;

Block:
	DeclarationPart StatementPart;

DeclarationPart:
	(LabelDeclarationPart)? (ConstantDefinitionPart)? (TypeDefinitionPart)? (VariableDeclarationPart)?
	ProcedureAndFunctionDeclarationPart;

LabelDeclarationPart:
	LABELT Label (COMMA Label)* SEMICOLON;

ConstantDefinitionPart:
	CONSTT ConstantDefinition SEMICOLON (ConstantDefinition SEMICOLON)*;

ConstantDefinition:
	IDENTIFIER EQT Constant;

TypeDefinitionPart:
	TYPET TypeDefinition SEMICOLON (TypeDefinition SEMICOLON)*;

TypeDefinition:
	IDENTIFIER EQT Type;

VariableDeclarationPart:
	VART VariableDeclaration SEMICOLON (VariableDeclaration SEMICOLON)*;

VariableDeclaration:
	IdentifierList COLON Type;

ProcedureAndFunctionDeclarationPart:
	((ProcedureDeclaration | FunctionDeclaration) SEMICOLON)*;

ProcedureDeclaration:
	ProcedureHeading SEMICOLON (ProcedureBody | Directive);

ProcedureBody:
	Block;

FunctionDeclaration:
	FunctionHeading SEMICOLON (FunctionBody | Directive);

FunctionBody:
	Block;

Directive:
	FORWARDT;

StatementPart:
	BEGINT StatementSequence ENDT;

ProcedureHeading:
	PROCEDURET IDENTIFIER (FormalParameterList)?;

FunctionHeading:
	FUNCTIONT IDENTIFIER ((FormalParameterList)? COMMA IDENTIFIER)?;

FormalParameterList:
	LPAREN FormalParameterSection (SEMICOLON FormalParameterSection)* RPAREN;

FormalParameterSection:
	ValueParameterSection | VariableParameterSection | ProcedureParameterSection | FunctionParameterSection;

ValueParameterSection:
	IdentifierList COLON ParameterType;

VariableParameterSection:
	VART IdentifierList COLON ParameterType;

ProcedureParameterSection:
	ProcedureHeading;

FunctionParameterSection:
	FunctionHeading;

ParameterType:
	(IDENTIFIER | ConformantArraySchema);

ConformantArraySchema:
	(PackedConformantArraySchema | UnpackedConformantArraySchema);

PackedConformantArraySchema:
	PACKEDT ARRAYT "[ " BoundSpecification " ]" OFT IDENTIFIER;

UnpackedConformantArraySchema:
	ARRAYT LBRACKET BoundSpecification (SEMICOLON BoundSpecification)* RBRACKET
	OFT (IDENTIFIER | ConformantArraySchema);

BoundSpecification:
	IDENTIFIER DOUBLEPERIOD IDENTIFIER COLON IDENTIFIER;

StatementSequence:
	Statement (SEMICOLON Statement)*;

Statement:
	(Label COLON)? (SimpleStatement | StructuredStatement);

SimpleStatement:
	(AssignmentStatement | ProcedureStatement | GotoStatement)?;

AssignmentStatement:
	Variable COLONEQ Expression;

ProcedureStatement:
	IDENTIFIER (ActualParameterList)?;

GotoStatement:
	GOTOT Label;

StructuredStatement:
	CompoundStatement | RepetitiveStatement | ConditionalStatement | WithStatement;

CompoundStatement:
	BEGINT StatementSequence ENDT;

RepetitiveStatement:
	WhileStatement | RepeatStatement | ForStatement;

WhileStatement:
	WHILET Expression DOT Statement;

RepeatStatement:
	REPEATT StatementSequence UNTILT Expression;

ForStatement:
	FORT IDENTIFIER COLONEQ InitialExpression (TOT | DOWNTOT) DOT Statement;

InitialExpression:
	Expression;

FinalExpression:
	Expression;

ConditionalStatement:
	IfStatement | CaseStatement;

IfStatement:
	IFT THENT Statement (ELSET Statement)?;

CaseStatement:
	CASET OFT CaseLimb (SEMICOLON)* (SEMICOLON)? ENDT;

CaseLimb:
	CaseLabelList COLON Statement;

CaseLabelList:
	Constant (COMMA Constant)*;

WithStatement:
	WITHT (COMMA)* DOT Statement;

ActualParameterList:
	LPAREN ActualParameter (COMMA ActualParameter)* RPAREN;

ActualParameter:
	ActualValue IDENTIFIER;

ActualValue:
	Expression;

Expression:
	SimpleExpression (RelationalOperator SimpleExpression)?;

SimpleExpression:
	(SIGN)? Term (AdditionOperator Term)*;

Term:
	Factor (MultiplicatorOperator Factor)*;

RelationalOperator:
	EQT | '<>' | '<' | '<=' | '>' | '>=' | 'in';

AdditionOperator:
	SIGN | 'or';

MultiplicatorOperator:
	'*' | '/' | 'div' | 'mod' | 'and';

Factor:
	Number | STRING | Set | 'nil' | IDENTIFIER (ActualParameterList)? | LPAREN Expression RPAREN | 'not' Factor;

Set:
	LBRACKET ElementList RBRACKET;

Variable:
	IDENTIFIER;

ElementList:
	(Expression (COMMA Expression)*)?;

Type:
	(SimpleType | StructuredType | PointerType | IDENTIFIER);

SimpleType:
	(SubrangeType | EnumeratedType);

EnumeratedType:
	LPAREN IdentifierList RPAREN;

SubrangeType:
	Constant DOUBLEPERIOD Constant;

StructuredType:
	(PACKEDT)? UnpackedStructuredType;

UnpackedStructuredType:
	(ArrayType | RecordType | SetType | FileType);

ArrayType:
	ARRAYT LBRACKET IndexType (COMMA IndexType)* RBRACKET OFT ElementType;

IndexType:
	SimpleType;

ElementType:
	Type;

RecordType:
	RECORDT FieldList ENDT;

SetType:
	SETT OFT BaseType;

BaseType:
	Type;

FileType:
	FILET OFT Type;

PointerType:
	CARAT IDENTIFIER;

FieldList:
	((FixedPart (SEMICOLON VariantPart)? | VariantPart) (SEMICOLON)?)?;

FixedPart:
	RecordSection (SEMICOLON RecordSection)*;

RecordSection:
	IdentifierList COLON Type;

VariantPart:
	CASET TagField IDENTIFIER OFT Variant (SEMICOLON Variant)*;

TagField:
	(IDENTIFIER COLON)?;

Variant:
	CaseLabelList COLON LPAREN FieldList RPAREN;

OutputList:
	OutputValue (COMMA OutputValue)*;

OutputValue:
	Expression (SEMICOLON Expression (COLON Expression)?)?;

terminal PROGRAMT:
	'program';

terminal SEMICOLON:
	';';

terminal PERIOD:
	'.';

terminal LPAREN:
	'(';

terminal RPAREN:
	')';

terminal COMMA:
	',';

terminal LABELT:
	'label';

terminal CONSTT:
	'const';

terminal EQT:
	'=';

terminal TYPET:
	'type';

terminal VART:
	'var';

terminal COLON:
	':';

terminal FORWARDT:
	'forward';

terminal BEGINT:
	'begin';

terminal ENDT:
	'end';

terminal PROCEDURET:
	'procedure';

terminal FUNCTIONT:
	'function';

terminal ARRAYT:
	'array';

terminal PACKEDT:
	'packed';

terminal LBRACKET:
	'[';

terminal RBRACKET:
	']';

terminal OFT:
	'of';

terminal DOUBLEPERIOD:
	'..';

terminal RECORDT:
	'record';

terminal SETT:
	'set';

terminal FILET:
	'file';

terminal CARAT:
	'^';

terminal COLONEQ:
	':=';

terminal GOTOT:
	'goto';

terminal WHILET:
	'while';

terminal REPEATT:
	'repeat';

terminal FORT:
	'for';

terminal TOT:
	'to';

terminal DOWNTOT:
	'downto';

terminal DOT:
	'do';

terminal IFT:
	'if';

terminal THENT:
	'then';

terminal ELSET:
	'else';

terminal CASET:
	'case';

terminal WITHT:
	'with';

terminal UNTILT:
	'until';

IdentifierList:
	IDENTIFIER (COMMA IDENTIFIER)*;

terminal IDENTIFIER:
	LETTER (LETTER | DIGITO)*;

ConstantIdentifier:
	IDENTIFIER;

Number:
	(IntegerNumber | RealNumber);

ScaleFactor:
	('E' | 'e') DigitSequence;

RealNumber:
	DigitSequence PERIOD (UNSIGNEDDIGITSEQUENCE)? (ScaleFactor)? | DigitSequence ScaleFactor;

Constant:
	(SIGN)? (ConstantIdentifier | Number) | STRING;

terminal UNSIGNEDDIGITSEQUENCE:
	DIGITO (DIGITO)*;

DigitSequence:
	(SIGN)? UNSIGNEDDIGITSEQUENCE;

IntegerNumber:
	DigitSequence;

Label:
	IntegerNumber;

terminal SIGN:
	'+' | '-';

terminal fragment LETTER:
	('a'..'z') | ('A'..'Z');

terminal fragment DIGITO:
	('0'..'9');

terminal WS:
	(' ' | '\t' | '\r' | '\n');
	
