/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PascalProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PascalProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFICADORTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PascalProgram:
		//	"Program" name=IDENTIFICADOR ";";
		public ParserRule getRule() { return rule; }

		//"Program" name=IDENTIFICADOR ";"
		public Group getGroup() { return cGroup; }

		//"Program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//name=IDENTIFICADOR
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFICADOR
		public RuleCall getNameIDENTIFICADORTerminalRuleCall_1_0() { return cNameIDENTIFICADORTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private PascalProgramElements pPascalProgram;
	private TerminalRule tIDENTIFICADOR;
	private TerminalRule tCARACTERE;
	private TerminalRule tNUMERO;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PascalProgram:
	//	"Program" name=IDENTIFICADOR ";";
	public PascalProgramElements getPascalProgramAccess() {
		return (pPascalProgram != null) ? pPascalProgram : (pPascalProgram = new PascalProgramElements());
	}
	
	public ParserRule getPascalProgramRule() {
		return getPascalProgramAccess().getRule();
	}

	//terminal IDENTIFICADOR:
	//	CARACTERE (CARACTERE | NUMERO | "_")*;
	public TerminalRule getIDENTIFICADORRule() {
		return (tIDENTIFICADOR != null) ? tIDENTIFICADOR : (tIDENTIFICADOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFICADOR"));
	} 

	//terminal fragment CARACTERE:
	//	"a".."z" | "A".."Z";
	public TerminalRule getCARACTERERule() {
		return (tCARACTERE != null) ? tCARACTERE : (tCARACTERE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CARACTERE"));
	} 

	//terminal fragment NUMERO:
	//	"0".."9";
	public TerminalRule getNUMERORule() {
		return (tNUMERO != null) ? tNUMERO : (tNUMERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERO"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
